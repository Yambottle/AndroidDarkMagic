apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.example.yam.scanbloxlogindemo"
        minSdkVersion 26
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support:support-v4:28.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.16'
    implementation 'com.githang:status-bar-compat:0.7'
    implementation 'com.flyco.tablayout:FlycoTabLayout_Lib:2.1.2@aar'
}

class SDPFactory extends DefaultTask {

    @Input
    String unit = "dp"
    @Input
    double positiveMax = 50
    @Input
    double negativeMax = 60

    @TaskAction
    def create() {
        String resFolder =  project.getProjectDir().getPath() + "/src/main/res/"
        def list = [320, 360, 384, 411, 480, 540]
        list.each {
            String folder = resFolder + "values-sw" + (int)it + "dp"
            String fileName = folder + "/positive_sdps.xml"
            new File(folder).mkdir()
            new File(fileName).createNewFile()
            PrintWriter printWriter = new PrintWriter(fileName)
            printWriter.println("<?xml version=\"1.0\" encoding=\"utf-8\"?>")
            printWriter.println("<resources>")
            for(int i=0; i<=positiveMax; i++){
                double ratio = i/360d
                double sdp = ratio*it
                printWriter.printf("\t<dimen name=\"_%dsdp\">%.2f" + unit + "</dimen>\r\n", i, sdp)
            }
            for(double i=0.01; i<=50; i=i+0.01){
                double ratio = i/360d
                double sdp = ratio*it
                //using _0_01sdp
                String temp = String.format("%.2f",i)
                temp = temp.replace(".", "_")
                printWriter.printf("\t<dimen name=\"_%ssdp\">%.2f" + unit + "</dimen>\r\n",temp,sdp)
            }
            printWriter.println("</resources>")
            printWriter.close()
        }
        list.each {
            String folder = resFolder + "values-sw" + (int)it + "dp"
            String fileName = folder + "/positive_ssps.xml"
            new File(folder).mkdir()
            new File(fileName).createNewFile()
            PrintWriter printWriter = new PrintWriter(fileName)
            printWriter.println("<?xml version=\"1.0\" encoding=\"utf-8\"?>")
            printWriter.println("<resources>")
            for(int i=0; i<=50; i++){
                double ratio = i/360d
                double ssp = ratio*it
                printWriter.printf("\t<dimen name=\"_%dssp\">%.2f" + "sp" + "</dimen>\r\n", i, ssp)
            }
            for(double i=0.01; i<=50; i=i+0.01){
                double ratio = i/360d
                double ssp = ratio*it
                //using _0_01sdp
                String temp = String.format("%.2f",i)
                temp = temp.replace(".", "_")
                printWriter.printf("\t<dimen name=\"_%sssp\">%.2f" + "sp" + "</dimen>\r\n",temp,ssp)
            }
            printWriter.println("</resources>")
            printWriter.close()
        }
    }
}

task createSDP(type: SDPFactory) {
}

//uncomment next line to edit values
//preBuild.dependsOn createSDP

createSDP{
    unit = "dp"//change to "sp" if needed
    positiveMax = 600//change to 600 or any other value if needed
//    negativeMax = 60//change to 600 or any other value if needed
}
